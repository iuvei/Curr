#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var mobile = require('../mobile');
var debug = require('debug')('demo:server');
var http = require('http');
var log4js = require('log4js');
log4js.configure({
    appenders: {
        //everything: { type: 'file', filename: 'logs/all-the-logs.log', maxLogSize: 10485760, backups: 3, compress: true }
        everything: { type: 'console'}
    },
    categories: {
        default: { appenders: [ 'everything' ], level: 'debug'}
    }
});

var log = log4js.getLogger("startup");
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
var port2 = normalizePort(process.env.PORT+1 || '3001');
// app.set('port', port);
log.debug('test')
/**
 * Create HTTP server.
 */

var server = http.createServer(app.callback());
var frontServer = http.createServer(mobile.callback());
var io = require('socket.io')(frontServer, {path: '/ws/chat'});
console.log(io.path);
var socketEvents = require('../rest/controllers/frontend/socketEvents')(io);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
frontServer.listen(port2)
server.on('error', onError);
server.on('listening', onListening);
frontServer.on('error', onError);
frontServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
